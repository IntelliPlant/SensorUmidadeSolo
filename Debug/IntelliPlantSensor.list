
IntelliPlantSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  2000000c  08003f6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08003f6c  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022cf  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  000324c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a60  00000000  00000000  00034208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd21  00000000  00000000  0004ac68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bb97  00000000  00000000  00057989  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000400c  00000000  00000000  000e359c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003f20 	.word	0x08003f20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003f20 	.word	0x08003f20

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	valorh = HAL_ADC_GetValue(hadc);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f001 f83e 	bl	8001562 <HAL_ADC_GetValue>
 80004e6:	4603      	mov	r3, r0
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <HAL_ADC_ConvCpltCallback+0x24>)
 80004ec:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <HAL_ADC_ConvCpltCallback+0x28>)
 80004f0:	f000 fe46 	bl	8001180 <HAL_ADC_Start_IT>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000050c 	.word	0x2000050c
 8000500:	200004c4 	.word	0x200004c4

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fd62 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f814 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f9d8 	bl	80008c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000514:	f000 f8e6 	bl	80006e4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000518:	f000 f912 	bl	8000740 <MX_I2S2_Init>
  MX_I2S3_Init();
 800051c:	f000 f93e 	bl	800079c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000520:	f000 f96c 	bl	80007fc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000524:	f000 f88c 	bl	8000640 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000528:	f000 f99e 	bl	8000868 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800052c:	4801      	ldr	r0, [pc, #4]	; (8000534 <main+0x30>)
 800052e:	f000 fe27 	bl	8001180 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x2e>
 8000534:	200004c4 	.word	0x200004c4

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09a      	sub	sp, #104	; 0x68
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fce2 	bl	8003f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <SystemClock_Config+0x100>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	4a30      	ldr	r2, [pc, #192]	; (8000638 <SystemClock_Config+0x100>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	6413      	str	r3, [r2, #64]	; 0x40
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <SystemClock_Config+0x100>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <SystemClock_Config+0x104>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <SystemClock_Config+0x104>)
 8000594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0x104>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005be:	23c0      	movs	r3, #192	; 0xc0
 80005c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005c6:	2308      	movs	r3, #8
 80005c8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fbc4 	bl	8002d5c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005da:	f000 fa4d 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	2103      	movs	r1, #3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe1e 	bl	800323c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000606:	f000 fa37 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800060e:	23c8      	movs	r3, #200	; 0xc8
 8000610:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000612:	2305      	movs	r3, #5
 8000614:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4618      	mov	r0, r3
 8000620:	f002 ffea 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800062a:	f000 fa25 	bl	8000a78 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3768      	adds	r7, #104	; 0x68
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <MX_ADC1_Init+0x9c>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0x98>)
 800065a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <MX_ADC1_Init+0xa0>)
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_ADC1_Init+0x98>)
 800068e:	2201      	movs	r2, #1
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_ADC1_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006a2:	f000 fd29 	bl	80010f8 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ac:	f000 f9e4 	bl	8000a78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 ff6f 	bl	80015a4 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006cc:	f000 f9d4 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200004c4 	.word	0x200004c4
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f001 fc25 	bl	8001f70 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f9a4 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000068 	.word	0x20000068
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2S2_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2S2_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2S2_Init+0x50>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2S2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_I2S2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2S2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2S2_Init+0x50>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <MX_I2S2_Init+0x58>)
 8000768:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2S2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2S2_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2S2_Init+0x50>)
 8000778:	2201      	movs	r2, #1
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2S2_Init+0x50>)
 800077e:	f001 fd2f 	bl	80021e0 <HAL_I2S_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f976 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000568 	.word	0x20000568
 8000794:	40003800 	.word	0x40003800
 8000798:	00017700 	.word	0x00017700

0800079c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_I2S3_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <MX_I2S3_Init+0x5c>)
 80007c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2S3_Init+0x54>)
 80007dc:	f001 fd00 	bl	80021e0 <HAL_I2S_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f947 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200005b0 	.word	0x200005b0
 80007f4:	40003c00 	.word	0x40003c00
 80007f8:	00017700 	.word	0x00017700

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_SPI1_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_SPI1_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI1_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI1_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SPI1_Init+0x64>)
 800084e:	f003 f821 	bl	8003894 <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f90e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000510 	.word	0x20000510
 8000864:	40013000 	.word	0x40013000

08000868 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2204      	movs	r2, #4
 8000878:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2202      	movs	r2, #2
 800087e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2202      	movs	r2, #2
 800088a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	f002 f938 	bl	8002b20 <HAL_PCD_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f8df 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000bc 	.word	0x200000bc

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x19c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a5f      	ldr	r2, [pc, #380]	; (8000a60 <MX_GPIO_Init+0x19c>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <MX_GPIO_Init+0x19c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x19c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a58      	ldr	r2, [pc, #352]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a51      	ldr	r2, [pc, #324]	; (8000a60 <MX_GPIO_Init+0x19c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_GPIO_Init+0x19c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <MX_GPIO_Init+0x19c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a3c      	ldr	r2, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <MX_GPIO_Init+0x19c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	4837      	ldr	r0, [pc, #220]	; (8000a64 <MX_GPIO_Init+0x1a0>)
 8000988:	f001 fad8 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	4835      	ldr	r0, [pc, #212]	; (8000a68 <MX_GPIO_Init+0x1a4>)
 8000992:	f001 fad3 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000996:	2200      	movs	r2, #0
 8000998:	f24f 0110 	movw	r1, #61456	; 0xf010
 800099c:	4833      	ldr	r0, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x1a8>)
 800099e:	f001 facd 	bl	8001f3c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009a2:	2304      	movs	r3, #4
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	482b      	ldr	r0, [pc, #172]	; (8000a64 <MX_GPIO_Init+0x1a0>)
 80009b6:	f001 f93f 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4824      	ldr	r0, [pc, #144]	; (8000a64 <MX_GPIO_Init+0x1a0>)
 80009d2:	f001 f931 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009d6:	2332      	movs	r3, #50	; 0x32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0x1ac>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <MX_GPIO_Init+0x1a0>)
 80009ea:	f001 f925 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_GPIO_Init+0x1a4>)
 8000a06:	f001 f917 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_GPIO_Init+0x1ac>)
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_GPIO_Init+0x1b0>)
 8000a1e:	f001 f90b 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x1a8>)
 8000a3c:	f001 f8fc 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x1a8>)
 8000a54:	f001 f8f0 	bl	8001c38 <HAL_GPIO_Init>

}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	10120000 	.word	0x10120000
 8000a74:	40020000 	.word	0x40020000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f001 f874 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_ADC_MspInit+0x8c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12f      	bne.n	8000b5a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_ADC_MspInit+0x90>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_ADC_MspInit+0x94>)
 8000b46:	f001 f877 	bl	8001c38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2012      	movs	r0, #18
 8000b50:	f001 f83b 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b54:	2012      	movs	r0, #18
 8000b56:	f001 f854 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40012000 	.word	0x40012000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_I2C_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12c      	bne.n	8000bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <HAL_I2C_MspInit+0x8c>)
 8000bcc:	f001 f834 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_I2C_MspInit+0x88>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a59      	ldr	r2, [pc, #356]	; (8000d84 <HAL_I2S_MspInit+0x184>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d15b      	bne.n	8000cda <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a50      	ldr	r2, [pc, #320]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c76:	2304      	movs	r3, #4
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c86:	2306      	movs	r3, #6
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	483e      	ldr	r0, [pc, #248]	; (8000d8c <HAL_I2S_MspInit+0x18c>)
 8000c92:	f000 ffd1 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c96:	2308      	movs	r3, #8
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4836      	ldr	r0, [pc, #216]	; (8000d8c <HAL_I2S_MspInit+0x18c>)
 8000cb2:	f000 ffc1 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <HAL_I2S_MspInit+0x190>)
 8000cd4:	f000 ffb0 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cd8:	e04f      	b.n	8000d7a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <HAL_I2S_MspInit+0x194>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d14a      	bne.n	8000d7a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_I2S_MspInit+0x188>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <HAL_I2S_MspInit+0x198>)
 8000d54:	f000 ff70 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_I2S_MspInit+0x18c>)
 8000d76:	f000 ff5f 	bl	8001c38 <HAL_GPIO_Init>
}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	; 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40003800 	.word	0x40003800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40003c00 	.word	0x40003c00
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_SPI_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_SPI_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000df6:	23e0      	movs	r3, #224	; 0xe0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_SPI_MspInit+0x8c>)
 8000e12:	f000 ff11 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4c:	d13f      	bne.n	8000ece <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <HAL_PCD_MspInit+0xb0>)
 8000e80:	f000 feda 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e96:	230a      	movs	r3, #10
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <HAL_PCD_MspInit+0xb0>)
 8000ea2:	f000 fec9 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6353      	str	r3, [r2, #52]	; 0x34
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_PCD_MspInit+0xac>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f89e 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <ADC_IRQHandler+0x10>)
 8000f42:	f000 f9cd 	bl	80012e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200004c4 	.word	0x200004c4

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <SystemInit+0x28>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <SystemInit+0x28>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SystemInit+0x28>)
 8000f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
  ldr  r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd3 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f002 ff8d 	bl	8003ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff faa9 	bl	8000504 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fb8:	08003f60 	.word	0x08003f60
  ldr  r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000fc4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000fc8:	200005fc 	.word	0x200005fc

08000fcc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <DMA1_Stream0_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_Init+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_Init+0x40>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x40>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 fddb 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fd40 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fdf3 	bl	8001c1e <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 fdbb 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	200005f8 	.word	0x200005f8

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200005f8 	.word	0x200005f8

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_Delay+0x40>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e033      	b.n	8001176 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fcde 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2b00      	cmp	r3, #0
 8001134:	d118      	bne.n	8001168 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800113e:	f023 0302 	bic.w	r3, r3, #2
 8001142:	f043 0202 	orr.w	r2, r3, #2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 fb5c 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f023 0303 	bic.w	r3, r3, #3
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
 8001166:	e001      	b.n	800116c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ADC_Start_IT+0x1a>
 8001196:	2302      	movs	r3, #2
 8001198:	e094      	b.n	80012c4 <HAL_ADC_Start_IT+0x144>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d018      	beq.n	80011e2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_ADC_Start_IT+0x150>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_ADC_Start_IT+0x154>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9a      	lsrs	r2, r3, #18
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d168      	bne.n	80012c2 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800121a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800122e:	d106      	bne.n	800123e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f023 0206 	bic.w	r2, r3, #6
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
 800123c:	e002      	b.n	8001244 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_ADC_Start_IT+0x158>)
 800124e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001258:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11c      	bne.n	80012c2 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e013      	b.n	80012c2 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_ADC_Start_IT+0x15c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d10e      	bne.n	80012c2 <HAL_ADC_Start_IT+0x142>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000

080012e0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	bf0c      	ite	eq
 80012fe:	2301      	moveq	r3, #1
 8001300:	2300      	movne	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b20      	cmp	r3, #32
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d049      	beq.n	80013b6 <HAL_ADC_IRQHandler+0xd6>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d046      	beq.n	80013b6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d12b      	bne.n	80013a6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d127      	bne.n	80013a6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800136e:	2b00      	cmp	r3, #0
 8001370:	d119      	bne.n	80013a6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0220 	bic.w	r2, r2, #32
 8001380:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f896 	bl	80004d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0212 	mvn.w	r2, #18
 80013b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	2b80      	cmp	r3, #128	; 0x80
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d057      	beq.n	8001498 <HAL_ADC_IRQHandler+0x1b8>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d054      	beq.n	8001498 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d139      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12b      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d124      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11d      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001450:	2b00      	cmp	r3, #0
 8001452:	d119      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001462:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fab9 	bl	8001a00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f06f 020c 	mvn.w	r2, #12
 8001496:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	2b40      	cmp	r3, #64	; 0x40
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d017      	beq.n	80014fa <HAL_ADC_IRQHandler+0x21a>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d014      	beq.n	80014fa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10d      	bne.n	80014fa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f846 	bl	800157c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0201 	mvn.w	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b20      	cmp	r3, #32
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <HAL_ADC_IRQHandler+0x27a>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d012      	beq.n	800155a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f043 0202 	orr.w	r2, r3, #2
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0220 	mvn.w	r2, #32
 8001548:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f820 	bl	8001590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0220 	mvn.w	r2, #32
 8001558:	601a      	str	r2, [r3, #0]
  }
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e113      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x244>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d925      	bls.n	800161c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43da      	mvns	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	400a      	ands	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68d9      	ldr	r1, [r3, #12]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	4603      	mov	r3, r0
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4403      	add	r3, r0
 800160e:	3b1e      	subs	r3, #30
 8001610:	409a      	lsls	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e022      	b.n	8001662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	2207      	movs	r2, #7
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	4603      	mov	r3, r0
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4403      	add	r3, r0
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b06      	cmp	r3, #6
 8001668:	d824      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	e04c      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d824      	bhi.n	8001706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b23      	subs	r3, #35	; 0x23
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	; 0x23
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
 8001704:	e023      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b41      	subs	r3, #65	; 0x41
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	; 0x41
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_ADC_ConfigChannel+0x250>)
 8001750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d10f      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d10b      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b11      	cmp	r3, #17
 8001796:	d122      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_ADC_ConfigChannel+0x258>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d111      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x25c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_ADC_ConfigChannel+0x260>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	40012000 	.word	0x40012000
 80017fc:	10000012 	.word	0x10000012
 8001800:	20000000 	.word	0x20000000
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e159      	b.n	8001f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8148 	bne.w	8001f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d00b      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c86:	2b11      	cmp	r3, #17
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0xfc>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a2 	beq.w	8001f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0x202>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x1fe>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x1f6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a44      	ldr	r2, [pc, #272]	; (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x1f2>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f aea2 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	619a      	str	r2, [r3, #24]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e11f      	b.n	80021c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fdea 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fd4:	f001 fafc 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4a7b      	ldr	r2, [pc, #492]	; (80021cc <HAL_I2C_Init+0x25c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d807      	bhi.n	8001ff4 <HAL_I2C_Init+0x84>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_I2C_Init+0x260>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	bf94      	ite	ls
 8001fec:	2301      	movls	r3, #1
 8001fee:	2300      	movhi	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e006      	b.n	8002002 <HAL_I2C_Init+0x92>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	; (80021d4 <HAL_I2C_Init+0x264>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	bf94      	ite	ls
 8001ffc:	2301      	movls	r3, #1
 8001ffe:	2300      	movhi	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0db      	b.n	80021c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_I2C_Init+0x268>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9b      	lsrs	r3, r3, #18
 8002014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a64      	ldr	r2, [pc, #400]	; (80021cc <HAL_I2C_Init+0x25c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d802      	bhi.n	8002044 <HAL_I2C_Init+0xd4>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3301      	adds	r3, #1
 8002042:	e009      	b.n	8002058 <HAL_I2C_Init+0xe8>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	4a63      	ldr	r2, [pc, #396]	; (80021dc <HAL_I2C_Init+0x26c>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	3301      	adds	r3, #1
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800206a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4956      	ldr	r1, [pc, #344]	; (80021cc <HAL_I2C_Init+0x25c>)
 8002074:	428b      	cmp	r3, r1
 8002076:	d80d      	bhi.n	8002094 <HAL_I2C_Init+0x124>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e59      	subs	r1, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fbb1 f3f3 	udiv	r3, r1, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	bf38      	it	cc
 8002090:	2304      	movcc	r3, #4
 8002092:	e04f      	b.n	8002134 <HAL_I2C_Init+0x1c4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_I2C_Init+0x150>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e012      	b.n	80020e6 <HAL_I2C_Init+0x176>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Init+0x17e>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e022      	b.n	8002134 <HAL_I2C_Init+0x1c4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10e      	bne.n	8002114 <HAL_I2C_Init+0x1a4>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e58      	subs	r0, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	440b      	add	r3, r1
 8002104:	fbb0 f3f3 	udiv	r3, r0, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Init+0x1c4>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	6809      	ldr	r1, [r1, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6911      	ldr	r1, [r2, #16]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68d2      	ldr	r2, [r2, #12]
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	000186a0 	.word	0x000186a0
 80021d0:	001e847f 	.word	0x001e847f
 80021d4:	003d08ff 	.word	0x003d08ff
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e128      	b.n	8002444 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a90      	ldr	r2, [pc, #576]	; (800244c <HAL_I2S_Init+0x26c>)
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fcf7 	bl	8000c00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002228:	f023 030f 	bic.w	r3, r3, #15
 800222c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2202      	movs	r2, #2
 8002234:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d060      	beq.n	8002300 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002246:	2310      	movs	r3, #16
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e001      	b.n	8002250 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800224c:	2320      	movs	r3, #32
 800224e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b20      	cmp	r3, #32
 8002256:	d802      	bhi.n	800225e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800225e:	2001      	movs	r0, #1
 8002260:	f001 faba 	bl	80037d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002264:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226e:	d125      	bne.n	80022bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d010      	beq.n	800229a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	3305      	adds	r3, #5
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	e01f      	b.n	80022da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	3305      	adds	r3, #5
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e00e      	b.n	80022da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	3305      	adds	r3, #5
 80022d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_I2S_Init+0x270>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e003      	b.n	8002308 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002300:	2302      	movs	r3, #2
 8002302:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d902      	bls.n	8002314 <HAL_I2S_Init+0x134>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d907      	bls.n	8002324 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f043 0210 	orr.w	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e08f      	b.n	8002444 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	ea42 0103 	orr.w	r1, r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	430a      	orrs	r2, r1
 8002336:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002342:	f023 030f 	bic.w	r3, r3, #15
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6851      	ldr	r1, [r2, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6992      	ldr	r2, [r2, #24]
 800235a:	430a      	orrs	r2, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d161      	bne.n	8002434 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a38      	ldr	r2, [pc, #224]	; (8002454 <HAL_I2S_Init+0x274>)
 8002374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_I2S_Init+0x278>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_I2S_Init+0x1a4>
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_I2S_Init+0x27c>)
 8002382:	e001      	b.n	8002388 <HAL_I2S_Init+0x1a8>
 8002384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4932      	ldr	r1, [pc, #200]	; (8002458 <HAL_I2S_Init+0x278>)
 8002390:	428a      	cmp	r2, r1
 8002392:	d101      	bne.n	8002398 <HAL_I2S_Init+0x1b8>
 8002394:	4a31      	ldr	r2, [pc, #196]	; (800245c <HAL_I2S_Init+0x27c>)
 8002396:	e001      	b.n	800239c <HAL_I2S_Init+0x1bc>
 8002398:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800239c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023a0:	f023 030f 	bic.w	r3, r3, #15
 80023a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <HAL_I2S_Init+0x278>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_I2S_Init+0x1d4>
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_I2S_Init+0x27c>)
 80023b2:	e001      	b.n	80023b8 <HAL_I2S_Init+0x1d8>
 80023b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b8:	2202      	movs	r2, #2
 80023ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <HAL_I2S_Init+0x278>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_I2S_Init+0x1ea>
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_I2S_Init+0x27c>)
 80023c8:	e001      	b.n	80023ce <HAL_I2S_Init+0x1ee>
 80023ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023da:	d003      	beq.n	80023e4 <HAL_I2S_Init+0x204>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e001      	b.n	80023f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	b299      	uxth	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002406:	4303      	orrs	r3, r0
 8002408:	b29b      	uxth	r3, r3
 800240a:	430b      	orrs	r3, r1
 800240c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800240e:	4313      	orrs	r3, r2
 8002410:	b29a      	uxth	r2, r3
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	4313      	orrs	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_I2S_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_I2S_Init+0x24c>
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_I2S_Init+0x27c>)
 800242a:	e001      	b.n	8002430 <HAL_I2S_Init+0x250>
 800242c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002430:	897a      	ldrh	r2, [r7, #10]
 8002432:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08002557 	.word	0x08002557
 8002450:	cccccccd 	.word	0xcccccccd
 8002454:	0800266d 	.word	0x0800266d
 8002458:	40003800 	.word	0x40003800
 800245c:	40003400 	.word	0x40003400

08002460 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10e      	bne.n	80024f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffb8 	bl	8002460 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	1c9a      	adds	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10e      	bne.n	800254e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800253e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff93 	bl	8002474 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b04      	cmp	r3, #4
 8002570:	d13a      	bne.n	80025e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d109      	bne.n	8002590 <I2S_IRQHandler+0x3a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d102      	bne.n	8002590 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffb4 	bl	80024f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d126      	bne.n	80025e8 <I2S_IRQHandler+0x92>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d11f      	bne.n	80025e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff50 	bl	8002488 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d136      	bne.n	8002662 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d109      	bne.n	8002612 <I2S_IRQHandler+0xbc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d102      	bne.n	8002612 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff45 	bl	800249c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d122      	bne.n	8002662 <I2S_IRQHandler+0x10c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d11b      	bne.n	8002662 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002638:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff13 	bl	8002488 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4aa2      	ldr	r2, [pc, #648]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002686:	4ba2      	ldr	r3, [pc, #648]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002688:	e001      	b.n	800268e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800268a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a9b      	ldr	r2, [pc, #620]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80026a4:	4b9a      	ldr	r3, [pc, #616]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026a6:	e001      	b.n	80026ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b8:	d004      	beq.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 8099 	bne.w	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d107      	bne.n	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f925 	bl	8002928 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9c8 	bl	8002a88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d13a      	bne.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d035      	beq.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a7e      	ldr	r2, [pc, #504]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002716:	4b7e      	ldr	r3, [pc, #504]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002718:	e001      	b.n	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800271a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4979      	ldr	r1, [pc, #484]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002726:	428b      	cmp	r3, r1
 8002728:	d101      	bne.n	800272e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800272c:	e001      	b.n	8002732 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800272e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002736:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002746:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fe88 	bl	8002488 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	f040 80be 	bne.w	8002900 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b8 	beq.w	8002900 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800279e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a59      	ldr	r2, [pc, #356]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80027aa:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027ac:	e001      	b.n	80027b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80027ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4954      	ldr	r1, [pc, #336]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027ba:	428b      	cmp	r3, r1
 80027bc:	d101      	bne.n	80027c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027c0:	e001      	b.n	80027c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80027c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fe4a 	bl	8002488 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027f4:	e084      	b.n	8002900 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8be 	bl	800298c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8fd 	bl	8002a24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d12f      	bne.n	8002894 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02a      	beq.n	8002894 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800284c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2e      	ldr	r2, [pc, #184]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002858:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800285a:	e001      	b.n	8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800285c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4929      	ldr	r1, [pc, #164]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d101      	bne.n	8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800286e:	e001      	b.n	8002874 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002878:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0202 	orr.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fdfa 	bl	8002488 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d131      	bne.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02c      	beq.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028b4:	e001      	b.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80028b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4912      	ldr	r1, [pc, #72]	; (800290c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d101      	bne.n	80028ca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028c8:	e001      	b.n	80028ce <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80028ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028e2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fdc5 	bl	8002488 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028fe:	e000      	b.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002900:	bf00      	nop
}
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40003800 	.word	0x40003800
 8002910:	40003400 	.word	0x40003400

08002914 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c99      	adds	r1, r3, #2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6251      	str	r1, [r2, #36]	; 0x24
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002968:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffc9 	bl	8002914 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c99      	adds	r1, r3, #2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6251      	str	r1, [r2, #36]	; 0x24
 800299e:	8819      	ldrh	r1, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <I2SEx_TxISR_I2SExt+0x90>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <I2SEx_TxISR_I2SExt+0x22>
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <I2SEx_TxISR_I2SExt+0x94>)
 80029ac:	e001      	b.n	80029b2 <I2SEx_TxISR_I2SExt+0x26>
 80029ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b2:	460a      	mov	r2, r1
 80029b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d121      	bne.n	8002a12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <I2SEx_TxISR_I2SExt+0x90>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <I2SEx_TxISR_I2SExt+0x50>
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <I2SEx_TxISR_I2SExt+0x94>)
 80029da:	e001      	b.n	80029e0 <I2SEx_TxISR_I2SExt+0x54>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	490d      	ldr	r1, [pc, #52]	; (8002a1c <I2SEx_TxISR_I2SExt+0x90>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d101      	bne.n	80029f0 <I2SEx_TxISR_I2SExt+0x64>
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <I2SEx_TxISR_I2SExt+0x94>)
 80029ee:	e001      	b.n	80029f4 <I2SEx_TxISR_I2SExt+0x68>
 80029f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff81 	bl	8002914 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40003800 	.word	0x40003800
 8002a20:	40003400 	.word	0x40003400

08002a24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68d8      	ldr	r0, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	1c99      	adds	r1, r3, #2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a3c:	b282      	uxth	r2, r0
 8002a3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d113      	bne.n	8002a80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff4a 	bl	8002914 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <I2SEx_RxISR_I2SExt+0x90>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <I2SEx_RxISR_I2SExt+0x16>
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <I2SEx_RxISR_I2SExt+0x94>)
 8002a9c:	e001      	b.n	8002aa2 <I2SEx_RxISR_I2SExt+0x1a>
 8002a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa2:	68d8      	ldr	r0, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	1c99      	adds	r1, r3, #2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002aae:	b282      	uxth	r2, r0
 8002ab0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d121      	bne.n	8002b0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <I2SEx_RxISR_I2SExt+0x90>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <I2SEx_RxISR_I2SExt+0x50>
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <I2SEx_RxISR_I2SExt+0x94>)
 8002ad6:	e001      	b.n	8002adc <I2SEx_RxISR_I2SExt+0x54>
 8002ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	490d      	ldr	r1, [pc, #52]	; (8002b18 <I2SEx_RxISR_I2SExt+0x90>)
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d101      	bne.n	8002aec <I2SEx_RxISR_I2SExt+0x64>
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <I2SEx_RxISR_I2SExt+0x94>)
 8002aea:	e001      	b.n	8002af0 <I2SEx_RxISR_I2SExt+0x68>
 8002aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002af4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff03 	bl	8002914 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40003800 	.word	0x40003800
 8002b1c:	40003400 	.word	0x40003400

08002b20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b22:	b08f      	sub	sp, #60	; 0x3c
 8002b24:	af0a      	add	r7, sp, #40	; 0x28
 8002b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e10f      	b.n	8002d52 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fe f96d 	bl	8000e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 ff54 	bl	8003a1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	687e      	ldr	r6, [r7, #4]
 8002b7e:	466d      	mov	r5, sp
 8002b80:	f106 0410 	add.w	r4, r6, #16
 8002b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b94:	1d33      	adds	r3, r6, #4
 8002b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b98:	6838      	ldr	r0, [r7, #0]
 8002b9a:	f000 fedf 	bl	800395c <USB_CoreInit>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d0      	b.n	8002d52 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 ff42 	bl	8003a40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e04a      	b.n	8002c58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	333d      	adds	r3, #61	; 0x3d
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	333c      	adds	r3, #60	; 0x3c
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	b298      	uxth	r0, r3
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3342      	adds	r3, #66	; 0x42
 8002bfe:	4602      	mov	r2, r0
 8002c00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3344      	adds	r3, #68	; 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3348      	adds	r3, #72	; 0x48
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3350      	adds	r3, #80	; 0x50
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	3301      	adds	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3af      	bcc.n	8002bc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	e044      	b.n	8002cf2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3b5      	bcc.n	8002c68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	687e      	ldr	r6, [r7, #4]
 8002d04:	466d      	mov	r5, sp
 8002d06:	f106 0410 	add.w	r4, r6, #16
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f000 feb8 	bl	8003a94 <USB_DevInit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00d      	b.n	8002d52 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f867 	bl	8003e1e <USB_DevDisconnect>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e25b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4ba3      	ldr	r3, [pc, #652]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b99      	ldr	r3, [pc, #612]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e236      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b91      	ldr	r3, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a8a      	ldr	r2, [pc, #552]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a87      	ldr	r2, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe f942 	bl	800109c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe f93e 	bl	800109c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1fb      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f92e 	bl	800109c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe f92a 	bl	800109c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1e7      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b62      	ldr	r3, [pc, #392]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1bb      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4952      	ldr	r1, [pc, #328]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b4f      	ldr	r3, [pc, #316]	; (800300c <HAL_RCC_OscConfig+0x2b0>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f8e3 	bl	800109c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe f8df 	bl	800109c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e19c      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4940      	ldr	r1, [pc, #256]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x2b0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f8c2 	bl	800109c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe f8be 	bl	800109c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e17b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_OscConfig+0x2b4>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f8a2 	bl	800109c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f89e 	bl	800109c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e15b      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x2b4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe f88b 	bl	800109c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f887 	bl	800109c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e144      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a0 	beq.w	80030f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a07      	ldr	r2, [pc, #28]	; (8003014 <HAL_RCC_OscConfig+0x2b8>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f84d 	bl	800109c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e011      	b.n	800302a <HAL_RCC_OscConfig+0x2ce>
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
 8003014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fe f840 	bl	800109c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0fd      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x2f0>
 800303e:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a7c      	ldr	r2, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	e01c      	b.n	8003086 <HAL_RCC_OscConfig+0x32a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d10c      	bne.n	800306e <HAL_RCC_OscConfig+0x312>
 8003054:	4b77      	ldr	r3, [pc, #476]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a76      	ldr	r2, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	4b74      	ldr	r3, [pc, #464]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a73      	ldr	r2, [pc, #460]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	e00b      	b.n	8003086 <HAL_RCC_OscConfig+0x32a>
 800306e:	4b71      	ldr	r3, [pc, #452]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a70      	ldr	r2, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	4b6e      	ldr	r3, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a6d      	ldr	r2, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f805 	bl	800109c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f801 	bl	800109c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0bc      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ee      	beq.n	8003096 <HAL_RCC_OscConfig+0x33a>
 80030b8:	e014      	b.n	80030e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fd ffef 	bl	800109c <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fd ffeb 	bl	800109c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0a6      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b52      	ldr	r3, [pc, #328]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8092 	beq.w	8003224 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003100:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d05c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d141      	bne.n	8003198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fd ffbf 	bl	800109c <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fd ffbb 	bl	800109c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e078      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	019b      	lsls	r3, r3, #6
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	4933      	ldr	r1, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd ff94 	bl	800109c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd ff90 	bl	800109c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e04d      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x41c>
 8003196:	e045      	b.n	8003224 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fd ff7d 	bl	800109c <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fd ff79 	bl	800109c <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x44a>
 80031c4:	e02e      	b.n	8003224 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e029      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCC_OscConfig+0x4d8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003200:	4293      	cmp	r3, r2
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40007000 	.word	0x40007000
 8003234:	40023800 	.word	0x40023800
 8003238:	42470060 	.word	0x42470060

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0cc      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b8      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003290:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	494d      	ldr	r1, [pc, #308]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e067      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4934      	ldr	r1, [pc, #208]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fd feb6 	bl	800109c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd feb2 	bl	800109c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d20c      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e032      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4916      	ldr	r1, [pc, #88]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490e      	ldr	r1, [pc, #56]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c2:	f000 f821 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	fa21 f303 	lsr.w	r3, r1, r3
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fe16 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08003f38 	.word	0x08003f38
 8003400:	20000000 	.word	0x20000000
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d007      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x32>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d008      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x38>
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 80b4 	bne.w	800359c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003436:	60bb      	str	r3, [r7, #8]
       break;
 8003438:	e0b3      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343a:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800343c:	60bb      	str	r3, [r7, #8]
      break;
 800343e:	e0b0      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003440:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04a      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	f04f 0400 	mov.w	r4, #0
 8003460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	ea03 0501 	and.w	r5, r3, r1
 800346c:	ea04 0602 	and.w	r6, r4, r2
 8003470:	4629      	mov	r1, r5
 8003472:	4632      	mov	r2, r6
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	0154      	lsls	r4, r2, #5
 800347e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003482:	014b      	lsls	r3, r1, #5
 8003484:	4619      	mov	r1, r3
 8003486:	4622      	mov	r2, r4
 8003488:	1b49      	subs	r1, r1, r5
 800348a:	eb62 0206 	sbc.w	r2, r2, r6
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	0194      	lsls	r4, r2, #6
 8003498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800349c:	018b      	lsls	r3, r1, #6
 800349e:	1a5b      	subs	r3, r3, r1
 80034a0:	eb64 0402 	sbc.w	r4, r4, r2
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	00e2      	lsls	r2, r4, #3
 80034ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034b2:	00d9      	lsls	r1, r3, #3
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	195b      	adds	r3, r3, r5
 80034ba:	eb44 0406 	adc.w	r4, r4, r6
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	0262      	lsls	r2, r4, #9
 80034c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034cc:	0259      	lsls	r1, r3, #9
 80034ce:	460b      	mov	r3, r1
 80034d0:	4614      	mov	r4, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	4621      	mov	r1, r4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 0400 	mov.w	r4, #0
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	f7fc fe7a 	bl	80001d8 <__aeabi_uldivmod>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e049      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	f04f 0400 	mov.w	r4, #0
 80034f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	ea03 0501 	and.w	r5, r3, r1
 8003502:	ea04 0602 	and.w	r6, r4, r2
 8003506:	4629      	mov	r1, r5
 8003508:	4632      	mov	r2, r6
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	0154      	lsls	r4, r2, #5
 8003514:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003518:	014b      	lsls	r3, r1, #5
 800351a:	4619      	mov	r1, r3
 800351c:	4622      	mov	r2, r4
 800351e:	1b49      	subs	r1, r1, r5
 8003520:	eb62 0206 	sbc.w	r2, r2, r6
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	0194      	lsls	r4, r2, #6
 800352e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003532:	018b      	lsls	r3, r1, #6
 8003534:	1a5b      	subs	r3, r3, r1
 8003536:	eb64 0402 	sbc.w	r4, r4, r2
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	00e2      	lsls	r2, r4, #3
 8003544:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003548:	00d9      	lsls	r1, r3, #3
 800354a:	460b      	mov	r3, r1
 800354c:	4614      	mov	r4, r2
 800354e:	195b      	adds	r3, r3, r5
 8003550:	eb44 0406 	adc.w	r4, r4, r6
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	02a2      	lsls	r2, r4, #10
 800355e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003562:	0299      	lsls	r1, r3, #10
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	4618      	mov	r0, r3
 800356a:	4621      	mov	r1, r4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f04f 0400 	mov.w	r4, #0
 8003572:	461a      	mov	r2, r3
 8003574:	4623      	mov	r3, r4
 8003576:	f7fc fe2f 	bl	80001d8 <__aeabi_uldivmod>
 800357a:	4603      	mov	r3, r0
 800357c:	460c      	mov	r4, r1
 800357e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	60bb      	str	r3, [r7, #8]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800359e:	60bb      	str	r3, [r7, #8]
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	68bb      	ldr	r3, [r7, #8]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4601      	mov	r1, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08003f48 	.word	0x08003f48

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800361c:	2b00      	cmp	r3, #0
 800361e:	d038      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003626:	f7fd fd39 	bl	800109c <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800362e:	f7fd fd35 	bl	800109c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0bd      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003640:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	495a      	ldr	r1, [pc, #360]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800366c:	f7fd fd16 	bl	800109c <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003674:	f7fd fd12 	bl	800109c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e09a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8083 	beq.w	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4a47      	ldr	r2, [pc, #284]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
 80036b0:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fd fce8 	bl	800109c <HAL_GetTick>
 80036cc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036d0:	f7fd fce4 	bl	800109c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e06c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02f      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d028      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d114      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fcb2 	bl	800109c <HAL_GetTick>
 8003738:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fd fcae 	bl	800109c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e034      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ee      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376a:	d10d      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	4911      	ldr	r1, [pc, #68]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003792:	6093      	str	r3, [r2, #8]
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	4909      	ldr	r1, [pc, #36]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7d1a      	ldrb	r2, [r3, #20]
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80037b8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	42470068 	.word	0x42470068
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42470e40 	.word	0x42470e40
 80037d4:	424711e0 	.word	0x424711e0

080037d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d13f      	bne.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003806:	2b01      	cmp	r3, #1
 8003808:	d131      	bne.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800380a:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800380c:	617b      	str	r3, [r7, #20]
          break;
 800380e:	e031      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381c:	d109      	bne.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e008      	b.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	0f1b      	lsrs	r3, r3, #28
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	617b      	str	r3, [r7, #20]
          break;
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
          break;
 8003872:	bf00      	nop
        }
      }
      break;
 8003874:	bf00      	nop
    }
  }
  return frequency;
 8003876:	697b      	ldr	r3, [r7, #20]
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40023800 	.word	0x40023800
 8003888:	00bb8000 	.word	0x00bb8000
 800388c:	007a1200 	.word	0x007a1200
 8003890:	00f42400 	.word	0x00f42400

08003894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e056      	b.n	8003954 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd fa6b 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	ea42 0103 	orr.w	r1, r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 0104 	and.w	r1, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 001c 	add.w	r0, r7, #28
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d122      	bne.n	80039ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800399c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa56 	bl	8003e60 <USB_CoreReset>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e01a      	b.n	80039f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa4a 	bl	8003e60 <USB_CoreReset>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
 80039e2:	e005      	b.n	80039f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10b      	bne.n	8003a0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f043 0206 	orr.w	r2, r3, #6
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1a:	b004      	add	sp, #16
 8003a1c:	4770      	bx	lr

08003a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d106      	bne.n	8003a6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e00b      	b.n	8003a84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	e001      	b.n	8003a84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e003      	b.n	8003a8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003a84:	2032      	movs	r0, #50	; 0x32
 8003a86:	f7fd fb15 	bl	80010b4 <HAL_Delay>

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a94:	b084      	sub	sp, #16
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e009      	b.n	8003ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3340      	adds	r3, #64	; 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0e      	cmp	r3, #14
 8003acc:	d9f2      	bls.n	8003ab4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11c      	bne.n	8003b0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b0c:	e00b      	b.n	8003b26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	461a      	mov	r2, r3
 8003b42:	680b      	ldr	r3, [r1, #0]
 8003b44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10c      	bne.n	8003b66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b52:	2100      	movs	r1, #0
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f949 	bl	8003dec <USB_SetDevSpeed>
 8003b5a:	e008      	b.n	8003b6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f944 	bl	8003dec <USB_SetDevSpeed>
 8003b64:	e003      	b.n	8003b6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b66:	2103      	movs	r1, #3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f93f 	bl	8003dec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b6e:	2110      	movs	r1, #16
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8f3 	bl	8003d5c <USB_FlushTxFifo>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f911 	bl	8003da8 <USB_FlushRxFifo>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e043      	b.n	8003c42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd0:	d118      	bne.n	8003c04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e013      	b.n	8003c16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e008      	b.n	8003c16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	461a      	mov	r2, r3
 8003c12:	2300      	movs	r3, #0
 8003c14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	461a      	mov	r2, r3
 8003c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d3b7      	bcc.n	8003bba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e043      	b.n	8003cd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c66:	d118      	bne.n	8003c9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e013      	b.n	8003cac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e008      	b.n	8003cac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3b7      	bcc.n	8003c50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f043 0210 	orr.w	r2, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <USB_DevInit+0x2c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f043 0208 	orr.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d54:	b004      	add	sp, #16
 8003d56:	4770      	bx	lr
 8003d58:	803c3800 	.word	0x803c3800

08003d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <USB_FlushTxFifo+0x48>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e006      	b.n	8003d96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d0f0      	beq.n	8003d76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	00030d40 	.word	0x00030d40

08003da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2210      	movs	r2, #16
 8003db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <USB_FlushRxFifo+0x40>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e006      	b.n	8003dda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d0f0      	beq.n	8003dba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	00030d40 	.word	0x00030d40

08003dec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e38:	f023 0303 	bic.w	r3, r3, #3
 8003e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <USB_CoreReset+0x64>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01b      	b.n	8003eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	daf2      	bge.n	8003e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <USB_CoreReset+0x64>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e006      	b.n	8003eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d0f0      	beq.n	8003e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	00030d40 	.word	0x00030d40

08003ec8 <__libc_init_array>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	4e0d      	ldr	r6, [pc, #52]	; (8003f00 <__libc_init_array+0x38>)
 8003ecc:	4c0d      	ldr	r4, [pc, #52]	; (8003f04 <__libc_init_array+0x3c>)
 8003ece:	1ba4      	subs	r4, r4, r6
 8003ed0:	10a4      	asrs	r4, r4, #2
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	42a5      	cmp	r5, r4
 8003ed6:	d109      	bne.n	8003eec <__libc_init_array+0x24>
 8003ed8:	4e0b      	ldr	r6, [pc, #44]	; (8003f08 <__libc_init_array+0x40>)
 8003eda:	4c0c      	ldr	r4, [pc, #48]	; (8003f0c <__libc_init_array+0x44>)
 8003edc:	f000 f820 	bl	8003f20 <_init>
 8003ee0:	1ba4      	subs	r4, r4, r6
 8003ee2:	10a4      	asrs	r4, r4, #2
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	42a5      	cmp	r5, r4
 8003ee8:	d105      	bne.n	8003ef6 <__libc_init_array+0x2e>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef0:	4798      	blx	r3
 8003ef2:	3501      	adds	r5, #1
 8003ef4:	e7ee      	b.n	8003ed4 <__libc_init_array+0xc>
 8003ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003efa:	4798      	blx	r3
 8003efc:	3501      	adds	r5, #1
 8003efe:	e7f2      	b.n	8003ee6 <__libc_init_array+0x1e>
 8003f00:	08003f58 	.word	0x08003f58
 8003f04:	08003f58 	.word	0x08003f58
 8003f08:	08003f58 	.word	0x08003f58
 8003f0c:	08003f5c 	.word	0x08003f5c

08003f10 <memset>:
 8003f10:	4402      	add	r2, r0
 8003f12:	4603      	mov	r3, r0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d100      	bne.n	8003f1a <memset+0xa>
 8003f18:	4770      	bx	lr
 8003f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1e:	e7f9      	b.n	8003f14 <memset+0x4>

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
